from __future__ import absolute_import
from __future__ import print_function
import numpy as np
from psi4.driver.qcdb import periodictable
import BFS_bonding


class Molecule(object):
    def __init__(self, z_vals, xyz):
        """
        z_vals : container of integers
            Container of z values (atomic numbers) of length N.
            Ex: [
        xyz : container of container of doubles
            Container of Cartesian coordinates of N atoms. Dimensions (N, 3).
        """

        """
        z_vals - (N) list of integers
        xyz - (N, 3) list of doubles
        """
        self.z_vals = np.array(z_vals)
        self.xyz = np.array(xyz)      

        if self.xyz.shape[1] != 3:
            raise ValueError("XYZ should only have three coordinates")

        atom_indices = range(self.natoms())
        
        self.bonds = BFS_bonding.bond_profile(self)


    @staticmethod
    def from_xyz_string(xyz_string):
        z_vals = []
        xyz = []
        for line in xyz_string.splitlines():
            Zxyz_list = line.strip().split()
            if Zxyz_list == []:
                continue
            if len(Zxyz_list) != 4:
                raise KeyError("Line should have exactly 4 elements, Z, (x, y, z).")

            z_vals.append(periodictable.el2z[Zxyz_list[0]])
            xyz.append([float(x) for x in Zxyz_list[1:]])

        return Molecule(z_vals, xyz)
    @staticmethod
    def from_xyz_file(filename):
        f = open(filename)
        data = f.read().splitlines()
        f.close()
        data_string = ""

        for line in data:
            if len(line.split()) != 4: continue
            data_string += line + '\n'
        return Molecule.from_xyz_string(data_string)

    def natoms(self):
        return self.xyz.shape[0]

    def distance(self, atom1, atom2):
        return np.linalg.norm(self.xyz[atom1]- self.xyz[atom2])

    def symbol(self, atom_n):
        return periodictable._temp_symbol[int(self.z_vals[atom_n])]

    def to_xyz_file(self, filename):

        output = str(self.natoms())
        output += '\n #Generated by GT'
        
        for atom in range(self.natoms()):
            output += '\n'
            output += "%3s  " % self.symbol(atom)
            output += '   '.join("% 10.6f" % x for x in self.xyz[atom])

        f = open(filename, 'w')
        f.write(output)
        f.close()
        return output 



